name: Deploy

on:
  pull_request:
    branches:
      - main
    types:
      - closed

permissions:
  contents: read

# 해당 코드에서 사용될 변수 설정
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: reviewing-github-actions-s3-bucket
  CODE_DEPLOY_APP_NAME: reviewing-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: reviewing-codedeploy-deployment-group

jobs:
  if_merged:
    if: github.event.pull_request.merged == true
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # JDK 11 설정
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # gitignore한 파일 생성해주기
      # 보안 정보를 포함한 application-security.yml
      - name: make application-security.yml
        run: |
          # spring의 resources 경로로 이동
          cd ./src/main/resources
          touch ./application-security.yml
          # GitHub-Actions에서 설정한 값을 application-security.yml 파일에 쓰기
          echo "${{ secrets.PROPERTIES }}" > ./application-security.yml
        shell: bash

      # Gradle Build (Test 제외)
      - name: Build with Gradle
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: clean build -x test

        # AWS 인증 (IAM 사용자 Access key, Secret key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .

      #s3에 업로드한 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip